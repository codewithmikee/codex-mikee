#!/usr/bin/env node

import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';
import readline from 'readline';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const rootDir = path.resolve(__dirname, '..');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Get app name from command line arguments or prompt for it
const appName = process.argv[2];

if (!appName) {
  rl.question('Enter the name for your new app: ', (name) => {
    if (!name) {
      console.error('Error: App name is required');
      rl.close();
      process.exit(1);
    }
    createApp(name);
    rl.close();
  });
} else {
  createApp(appName);
  rl.close();
}

function createApp(name) {
  const appPath = path.join(rootDir, 'apps', name);
  
  // Check if the app already exists
  if (fs.existsSync(appPath)) {
    console.error(`Error: An app with name '${name}' already exists.`);
    process.exit(1);
  }
  
  console.log(`Creating new Next.js app: ${name}`);
  console.log(`Path: ${appPath}`);
  
  try {
    // Create the app directory and structure
    fs.mkdirSync(path.join(appPath, 'src', 'app'), { recursive: true });
    fs.mkdirSync(path.join(appPath, 'src', 'components'), { recursive: true });
    fs.mkdirSync(path.join(appPath, 'src', 'lib'), { recursive: true });
    fs.mkdirSync(path.join(appPath, 'src', 'styles'), { recursive: true });
    
    // Create package.json
    const packageJson = {
      name: `@workspace/${name}`,
      version: "0.1.0",
      private: true,
      scripts: {
        dev: "next dev",
        build: "next build",
        start: "next start",
        lint: "next lint"
      },
      dependencies: {
        next: "^14.0.0",
        react: "^18.2.0",
        "react-dom": "^18.2.0",
        "@tanstack/react-query": "^5.60.5",
        "@workspace/ui": "workspace:*",
        "@workspace/shared": "workspace:*",
        "lucide-react": "^0.453.0",
        "clsx": "^2.1.1",
        "tailwind-merge": "^2.5.4",
        "zod": "^3.23.8",
        "react-hook-form": "^7.53.1",
        "@hookform/resolvers": "^3.9.1"
      },
      devDependencies: {
        "@types/node": "^20.16.11",
        "@types/react": "^18.3.11",
        "@types/react-dom": "^18.3.1",
        "autoprefixer": "^10.4.20",
        "postcss": "^8.4.47",
        "tailwindcss": "^3.4.14",
        "typescript": "5.6.3"
      }
    };
    
    fs.writeFileSync(
      path.join(appPath, 'package.json'),
      JSON.stringify(packageJson, null, 2)
    );
    
    // Create tsconfig.json
    const tsConfig = {
      extends: "../../packages/config/tsconfig.nextjs.json",
      compilerOptions: {
        baseUrl: ".",
        paths: {
          "@/*": ["./src/*"],
          "@workspace/*": ["../../packages/*"]
        }
      },
      include: ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
      exclude: ["node_modules"]
    };
    
    fs.writeFileSync(
      path.join(appPath, 'tsconfig.json'),
      JSON.stringify(tsConfig, null, 2)
    );
    
    // Create next.config.js
    const nextConfig = `/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  transpilePackages: ["@workspace/ui", "@workspace/shared"],
  output: "standalone"
}

module.exports = nextConfig
`;
    
    fs.writeFileSync(path.join(appPath, 'next.config.js'), nextConfig);
    
    // Create tailwind.config.js
    const tailwindConfig = `/** @type {import('tailwindcss').Config} */
module.exports = {
  presets: [require('../../packages/ui/tailwind.config.js')],
  content: [
    './src/**/*.{js,ts,jsx,tsx}',
    '../../packages/ui/src/**/*.{js,ts,jsx,tsx}'
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}
`;
    
    fs.writeFileSync(path.join(appPath, 'tailwind.config.js'), tailwindConfig);
    
    // Create postcss.config.js
    const postcssConfig = `module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
`;
    
    fs.writeFileSync(path.join(appPath, 'postcss.config.js'), postcssConfig);
    
    // Create a basic layout file
    const layout = `import '@/styles/globals.css'
import { Inter } from 'next/font/google'
import { Metadata } from 'next'

const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
  title: '${name}',
  description: 'Generated by AI Workspace',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className={inter.className}>{children}</body>
    </html>
  )
}
`;
    
    fs.writeFileSync(path.join(appPath, 'src', 'app', 'layout.tsx'), layout);
    
    // Create a simple page component
    const page = `'use client'

import { Button } from '@workspace/ui'

export default function Home() {
  return (
    <main className="flex min-h-screen flex-col items-center justify-center p-24">
      <h1 className="text-4xl font-bold mb-8">
        Welcome to {process.env.NEXT_PUBLIC_APP_NAME || '${name}'}
      </h1>
      <p className="mb-4">
        This app was created using the AI Workspace monorepo structure
      </p>
      <Button>Get Started</Button>
    </main>
  )
}
`;
    
    fs.writeFileSync(path.join(appPath, 'src', 'app', 'page.tsx'), page);
    
    // Create global CSS
    const globalCss = `@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    
    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;
    
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
    
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    
    --ring: 222.2 84% 4.9%;
    
    --radius: 0.5rem;
  }
 
  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    
    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;
    
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    
    --ring: 212.7 26.8% 83.9%;
  }
}

body {
  @apply font-sans antialiased bg-background text-foreground;
}
`;
    
    fs.writeFileSync(path.join(appPath, 'src', 'styles', 'globals.css'), globalCss);
    
    // Create utils.ts in lib folder
    const utils = `import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
`;
    
    fs.writeFileSync(path.join(appPath, 'src', 'lib', 'utils.ts'), utils);
    
    // Create README.md
    const readme = `# ${name}

This is a Next.js application created within the AI Workspace monorepo.

## Getting Started

First, run the development server:

\`\`\`bash
pnpm dev
\`\`\`

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

## Learn More

To learn more about the technologies used:

- [Next.js Documentation](https://nextjs.org/docs)
- [Tailwind CSS Documentation](https://tailwindcss.com/docs)
- [ShadCN UI Documentation](https://ui.shadcn.com)
`;
    
    fs.writeFileSync(path.join(appPath, 'README.md'), readme);
    
    // Add the new app to the root tsconfig.json references
    updateRootTsConfig(name);
    
    console.log(`\nSuccessfully created ${name}!`);
    console.log(`To start the development server:`);
    console.log(`  cd apps/${name}`);
    console.log(`  pnpm dev\n`);
    console.log(`Happy coding!`);
  } catch (error) {
    console.error('Error creating app:', error);
    process.exit(1);
  }
}

function updateRootTsConfig(appName) {
  const tsConfigPath = path.join(rootDir, 'tsconfig.json');
  
  try {
    const tsConfig = JSON.parse(fs.readFileSync(tsConfigPath, 'utf8'));
    
    // Check if the reference already exists
    const existingRefIndex = tsConfig.references.findIndex(
      ref => ref.path === `./apps/${appName}`
    );
    
    if (existingRefIndex === -1) {
      // Add the new reference
      tsConfig.references.push({ path: `./apps/${appName}` });
      
      // Write the updated config back to the file
      fs.writeFileSync(tsConfigPath, JSON.stringify(tsConfig, null, 2));
      console.log(`Updated root tsconfig.json with reference to ${appName}`);
    }
  } catch (error) {
    console.warn(`Warning: Could not update root tsconfig.json: ${error.message}`);
  }
}
